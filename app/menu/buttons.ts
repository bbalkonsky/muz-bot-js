import {Markup} from "telegraf";
import {ChatPlatforms} from "../database/entities/ChatPlatforms";
import {CallbackButton, UrlButton} from "telegraf/typings/markup";
import {ChatState} from "../database/entities/ChatState";
import Info from "../helpers/info";
import {TelegrafContext} from "telegraf/typings/context";
import Helpers from "../helpers/helpers";

export default class Buttons {
    public static getPlatformsButtons(chatPlatforms: ChatPlatforms): CallbackButton[][] {
        const buttons = [];
        let tempArray = [];
        let counter = 1;
        const cols = 3;
        for (const platform in chatPlatforms) {
            if (!chatPlatforms.hasOwnProperty(platform)) continue;
            const newButton = Markup.callbackButton(
                `${chatPlatforms[platform] ? '‚úÖ' : '‚ùå'} ${Info.platforms[platform].alias}`, `platform:${platform}`
            );
            tempArray.push(newButton);
            if (counter < cols) {
                counter++;
            } else {
                buttons.push(tempArray);
                tempArray = [];
                counter = 1;
            }
        }
        if (tempArray.length) buttons.push(tempArray);
        buttons.push([Buttons.getBackButton('ru'), Buttons.getCloseButton('ru')]);
        return buttons;
    }

    private static getBackButton(language: string = 'en'): CallbackButton {
        return Markup.callbackButton(`‚óÄ ${language === 'ru' ? '–ù–∞–∑–∞–¥' : 'Back'}`, 'back');
    }

    private static getCloseButton(language: string = 'en'): CallbackButton {
        return Markup.callbackButton(`‚èπ ${language === 'ru' ? '–ó–∞–∫—Ä—ã—Ç—å' : 'Close'}`, 'close');
    }

    public static getMainMenuButtons(ctx: TelegrafContext): CallbackButton[][] {
        const newKeyboard = [];
        const language = ctx.from?.language_code ?? 'en';
        const isPrivate = ctx.chat.type === 'private';

        newKeyboard.push(
            [Markup.callbackButton(`‚öô ${language === 'ru' ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' : 'Chat settings'}`, 'settings')],
            [Markup.callbackButton(`‚Åâ ${language === 'ru' ? '–ü–æ–º–æ—â—å' : 'Get help'}`, 'help')]
        );
        newKeyboard.push([
            // Markup.callbackButton(`üí∞ ${language === 'ru' ? '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å' : 'Donate'}`, 'donate'),
            Markup.callbackButton(`‚úè ${language === 'ru' ? '–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É' : 'Contacts'}`, 'contacts'),
        ]);

        newKeyboard.push([
            Markup.callbackButton('ü§î –°–∫–∞–∑–∞—Ç—å –≤—Å–µ–º !!!', 'notify', !Helpers.isAdmin(ctx.chat.id))
        ]);

        newKeyboard.push([
            Buttons.getCloseButton(language)
        ]);
        return newKeyboard;
    }

    public static getSettingsButtons(state: ChatState, language: string = 'en'): CallbackButton[][] {
        return [
            [Markup.callbackButton(`üéß ${language === 'ru' ? '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã' : 'Platforms'}`, 'platforms')],
            [Markup.callbackButton(`${state.authorMode ? '‚úÖ' : '‚ùå'} ${language === 'ru' ? '–†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∞' : 'Author mode'}`, 'state:authorMode')],
            [Markup.callbackButton(`${state.annotations ? '‚úÖ' : '‚ùå'}  ${language === 'ru' ? '–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏' : 'Annotations'}`, 'state:annotations')],
            [Buttons.getBackButton(language), Buttons.getCloseButton(language)]
        ];
    }

    public static getHelpButtons(language: string = 'en'): CallbackButton[][] {
        return [
            [Markup.callbackButton(`${language === 'ru' ? '–ß—Ç–æ —ç—Ç–æ –≤–æ–æ–±—â–µ?' : 'Annotations'}`, 'helpOption:0')],
            [Markup.callbackButton(`${language === 'ru' ? '–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º' : 'Annotations'}`, 'helpOption:1')],
            [Markup.callbackButton(`${language === 'ru' ? '–ë–æ—Ç –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ' : 'Annotations'}`, 'helpOption:2')],
            [Markup.callbackButton(`${language === 'ru' ? '–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏' : 'Annotations'}`, 'helpOption:3')],
            [Buttons.getBackButton(language), Buttons.getCloseButton(language)]
        ];
    }

    public static getDonationsButtons(language: string = 'en'): (CallbackButton | UrlButton)[][] {
        return [
            [Markup.urlButton(`üíµ Yandex Money`, process.env.YMONEY_URL)],
            [Markup.urlButton(`üí≥ Patreon`, process.env.PATREON_URL)],
            [Buttons.getBackButton(language), Buttons.getCloseButton(language)]
        ]
    }

    public static getLeaveSceneButton(language: string = 'en'): CallbackButton[] {
        return [Markup.callbackButton(`‚ùå ${language === 'ru' ? '–û—Ç–º–µ–Ω–∞' : 'Cancel'}`, 'cancel')];
    }
}
